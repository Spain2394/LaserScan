// Generated by gencpp from file my_laser_lines/ExtractedLine.msg
// DO NOT EDIT!


#ifndef MY_LASER_LINES_MESSAGE_EXTRACTEDLINE_H
#define MY_LASER_LINES_MESSAGE_EXTRACTEDLINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace my_laser_lines
{
template <class ContainerAllocator>
struct ExtractedLine_
{
  typedef ExtractedLine_<ContainerAllocator> Type;

  ExtractedLine_()
    : r(0.0)
    , alpha(0.0)
    , firstScanPoint()
    , lastScanPoint()  {
    }
  ExtractedLine_(const ContainerAllocator& _alloc)
    : r(0.0)
    , alpha(0.0)
    , firstScanPoint(_alloc)
    , lastScanPoint(_alloc)  {
  (void)_alloc;
    }



   typedef float _r_type;
  _r_type r;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _firstScanPoint_type;
  _firstScanPoint_type firstScanPoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lastScanPoint_type;
  _lastScanPoint_type lastScanPoint;





  typedef boost::shared_ptr< ::my_laser_lines::ExtractedLine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_laser_lines::ExtractedLine_<ContainerAllocator> const> ConstPtr;

}; // struct ExtractedLine_

typedef ::my_laser_lines::ExtractedLine_<std::allocator<void> > ExtractedLine;

typedef boost::shared_ptr< ::my_laser_lines::ExtractedLine > ExtractedLinePtr;
typedef boost::shared_ptr< ::my_laser_lines::ExtractedLine const> ExtractedLineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_laser_lines::ExtractedLine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_laser_lines

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'my_laser_lines': ['/home/parallels/LaserScan/src/spain_a2/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_laser_lines::ExtractedLine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_laser_lines::ExtractedLine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_laser_lines::ExtractedLine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f75a43af20e7eac85f98816304fa2031";
  }

  static const char* value(const ::my_laser_lines::ExtractedLine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf75a43af20e7eac8ULL;
  static const uint64_t static_value2 = 0x5f98816304fa2031ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_laser_lines/ExtractedLine";
  }

  static const char* value(const ::my_laser_lines::ExtractedLine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The r and alpha parameters define the extracted line.\n\
float32 r\n\
float32 alpha\n\
#\n\
# The following points are used for display / debugging purposes only.\n\
# These points come from the position of the first and last laser scan points\n\
# used to estimate the line. They do not define the line and may not have even\n\
# been used in estimating the line (e.g. they may have exceeded the\n\
# maximum_range parameter). However, they are useful in visualizing what range\n\
# of scan points were used to estimate the line.\n\
\n\
geometry_msgs/Point firstScanPoint\n\
geometry_msgs/Point lastScanPoint\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::my_laser_lines::ExtractedLine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.alpha);
      stream.next(m.firstScanPoint);
      stream.next(m.lastScanPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtractedLine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_laser_lines::ExtractedLine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_laser_lines::ExtractedLine_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "firstScanPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.firstScanPoint);
    s << indent << "lastScanPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lastScanPoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_LASER_LINES_MESSAGE_EXTRACTEDLINE_H
